#+INCLUDE: "~/git_repos/PVA-parrot/PVA-Parrot/org/org_settings.org"

#+INCLUDE: "~/git_repos/PVA-parrot/PVA-Parrot/org/org_settings_weave.org"

* Introduction
  PVA-Parrot is an application for doing polytopic vector analysis. This is the
  main application.

* Project Information

  The application version:
  #+BEGIN_SRC clojure :noweb-ref version
  "0.1.0"
  #+END_SRC

  The application description:
  #+BEGIN_SRC clojure :noweb-ref description
  "A GUI application for polytopic vector analysis (PVA)."
  #+END_SRC

* Developing and building

 Instructions about developing and building the application.

** Prerequisites
   A JVM installation is required.

   Boot needs to be installed:
   #+BEGIN_SRC bash
   $ mv boot.sh boot && chmod a+x boot && sudo mv boot /usr/local/bin
   #+END_SRC

** Boot project setup
    #+BEGIN_SRC clojure :noweb no-export :tangle ../build.boot
    (set-env!
      <<boot source paths>>
      <<boot resource paths>>
      :dependencies '[
        <<boot dependencies>>
      ])

    <<boot tasks>>

    (task-options!
      <<boot tasks options>>)
    #+END_SRC

*** Classpath declarations

    Source paths are where source code files reside, both Clojure and
    Clojurescript paths are given and namespaces will be added to the classpath
    by boot.

    #+BEGIN_SRC clojure :noweb-ref "boot source paths"
      :source-paths #{"src/cljs" "src/clj"}
    #+END_SRC

    The resource paths will be on the classpath, too. Files in the resource
    paths will be treated as final articats in the build.

    #+BEGIN_SRC clojure :noweb-ref "boot resource paths"
      :resource-paths #{"resources"}
    #+END_SRC

*** Dependencies declaration
    :PROPERTIES:
    :noweb-ref: boot dependencies
    :END:

   - Clojurescript :: essential for the GUI client logic.
   #+BEGIN_SRC clojure
   [org.clojure/clojurescript "0.0-2814"]
   #+END_SRC

   - boot-cljs :: compilation of cljs files from boot tasks
   #+BEGIN_SRC clojure
   [adzerk/boot-cljs      "0.0-2814-1" :scope "test"]
   #+END_SRC

   - boot-reload :: trigger reload in browser when files changes
   #+BEGIN_SRC clojure
   [adzerk/boot-reload    "0.2.4"      :scope "test"]
   #+END_SRC

   - boot-http :: a simple HTTP serve task
   #+BEGIN_SRC clojure
   [pandeiro/boot-http    "0.6.3-SNAPSHOT"      :scope "test"]
   #+END_SRC

   - boot-notify :: visual notifications of boot build status
   #+BEGIN_SRC clojure
   [jeluard/boot-notify   "0.1.1"      :scope "test"]
   #+END_SRC

   - boot-garden :: compile garden data to CSS
   #+BEGIN_SRC clojure
   [boot-garden           "1.2.5-2"    :scope "test"]
   #+END_SRC

   - reagent :: clojurescript library for Facebook React, used for UI
        programming, linking app state with UI
   #+BEGIN_SRC clojure
   [reagent               "0.5.0-alpha3"]
   #+END_SRC

   - sente :: socket and AJAX communication library, backend and frontend
   - encore :: a depenendcy of =sente= and =timbre=, explicitly added to prevent
        [[https://github.com/ptaoussanis/encore/blob/master/DEP-CONFLICT.md][dependency version conflicts]]
   #+BEGIN_SRC clojure
   [com.taoensso/encore "1.21.0"]
   [com.taoensso/sente "1.3.0"]
   #+END_SRC

**** Backend dependencies
     #+BEGIN_SRC clojure
     [ring/ring-core "1.3.2"]
     [http-kit "2.1.19"]
     [compojure "1.3.1"]
     [com.taoensso/timbre "3.4.0"]
     [org.clojure/data.csv "0.1.2"]
     #+END_SRC

     Backend calculations are using Incanter. Using the latest stabel version 1.5.6
     for now.
     #+BEGIN_SRC clojure
     [incanter "1.5.6"]
     #+END_SRC


*** Tasks definitions
    :PROPERTIES:
    :noweb-ref: boot tasks
    :END:

    These are the tasks for the GUI application. Libs may define their own,
    additional tasks, e.g. [[id:libs-backend]]

    #+BEGIN_SRC clojure
    (require
      '[adzerk.boot-cljs      :refer [cljs]]
      '[adzerk.boot-reload    :refer [reload]]
      '[pandeiro.boot-http    :refer [serve]]
      '[boot-garden.core      :refer [garden]]
      '[jeluard.boot-notify   :refer [notify]])


    (deftask build []
      (comp
        (notify)
        (cljs)
        (garden :styles-var 'pva-parrot.styles/base
          :vendors ["webkit"]
          :auto-prefix #{:align-items}
          :output-to "css/garden.css")))

    (deftask dev-run []
      (comp (serve)
        (watch)
        (reload)
        (build)))

    (deftask production []
      (task-options! cljs {:optimizations :advanced
                           :compiler-options {:closure-defines {:goog.DEBUG false}}}
        garden {:pretty-print false})
      identity)

    (deftask development []
      (task-options! cljs {:optimizations :none
                           :unified-mode true
                           :source-map true}
        reload {:on-jsload 'pva-parrot.app/init})
      identity)

    (deftask prod
      "Simple alias to run application in production mode
       No REPL or automatic reloading code inserted."
      []
      (comp (production)
        (serve)
        (watch)
        (build)))

    (deftask dev
      "Simple alias to run application in development mode"
      []
      (comp (development)
        (dev-run)))
    #+END_SRC

**** Boot tasks for backend service

     Start the backend server and the GUI client via =boot serve-backend dev=

     boot task to start the backend server:
     #+BEGIN_SRC clojure
         (deftask serve-backend []
           (comp
             (serve :handler 'pva-parrot.backend.service/api
               :httpkit true
               :port 3333)))
     #+END_SRC

 #
*** Tasks options
    :PROPERTIES:
    :noweb-ref: boot tasks options
    :END:
    The macro =task-options!= is used to specify options for tasks. It gets
    passed pairs of tasks and this task's options as a map.

    Options for creating a maven pom.xml project declaration file:
    #+BEGIN_SRC clojure
    pom {:project 'pva-parrot
         :version <<version>>
         :description <<description>>}
    #+END_SRC

** Troubleshooting
*** JVM Config and Java 8

    boot-clj suggests some options for boot to prevent issues with the JVM: [[https://github.com/boot-clj/boot/wiki/JVM-Options][boot JVM Options]]

    #+BEGIN_SRC bash
    $ echo $BOOT_JVM_OPTIONS
    -Xmx2g -client -XX:+TieredCompilation -XX:TieredStopAtLevel=1 -XX:MaxPermSize=128m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xverify:none
    #+END_SRC

    I still had memory issues when running boot tasks. Upgrading to Java 8 seems to have fixed theses issues. So I
    recomment using Java 8.

* GUI Application

#+INCLUDE: "../src/cljs/pva_parrot/app.org"

#+INCLUDE: "../resources/index.org"

#+INCLUDE: "../resources/js/app.edn.org"

#+INCLUDE: "../src/clj/pva_parrot/styles.org"

* Libraries

  Libraries will be factored out and put into dedicated git repos later.

#+INCLUDE: "../src/cljs/pva_parrot/plot.org"

#+INCLUDE: "../src/cljs/pva_parrot/websockets.org"

#+INCLUDE: "../src/clj/pva_parrot/backend/service.org"

#+INCLUDE: "../src/clj/pva_parrot/calc/pca.org"

** Libraries to be started

*** Project Handling

    Libraries to manage and handle PVA projects and their resources. Includes version control and backup for projects.

*** Desktop App Shells

    Libraries to run the app as a desktop application. Candidates for this are
    node-webkit and atom-shell.

*** I/O

    Libraries for getting data in and out of the app. This includes for example
    file, database and web service access.

* Todos
** CHORE TODO org file needs to be split, gets way too slow
   :LOGBOOK:
   - State "CHORE"      from ""           [2015-03-07 Sat 11:44]
   :END:
   <2015-03-07 Sat>
** CHORE TODO it's about time to start adding tests I guess
   :LOGBOOK:
   - State "CHORE"      from ""           [2015-03-07 Sat 11:44]
   :END:
   <2015-03-07 Sat>

** IDEA TODO use CLJSJS
   :LOGBOOK:
   - State "IDEA"       from ""           [2015-03-07 Sat 17:34]
   :END:
